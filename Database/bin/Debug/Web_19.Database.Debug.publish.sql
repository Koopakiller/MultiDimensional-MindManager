/*
Deployment script for Web.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Web.Database"
:setvar DefaultFilePrefix "Web.Database"
:setvar DefaultDataPath "C:\Users\tomla\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\tomla\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[DbExplorer_GetAssociatedDataSets]...';


GO
CREATE PROCEDURE [dbo].[DbExplorer_GetAssociatedDataSets]
	@tableName NVARCHAR(128),
	@columnName NVARCHAR(128),
	@id INT
AS
BEGIN

	SELECT [table].[name]            AS [SourceTableName]
		 , colFK.[name]              AS [SourceTableColumn]
		 , [reftable].[name]         AS [TargetTableName]
		 , colPK.[name]              AS [TargetTableColumn]
		 , CAST((CASE WHEN [table].[name] LIKE @tableName THEN 0 ELSE 1 END) AS BIT) 
									 AS [HasMultipleMatchingValues]
		 , CAST('' AS NVARCHAR(MAX)) AS [Query]
	INTO #data
	FROM       sys.tables               AS [table]
	INNER JOIN sys.foreign_keys         AS fk           ON       fk.[parent_object_id] = [table].[object_id]
	INNER JOIN sys.foreign_key_columns  AS fkc          ON              fk.[object_id] = fkc.[constraint_object_id]
	INNER JOIN sys.columns              AS colFK        ON      fkc.[parent_object_id] = colFK.[object_id]
													   AND      fkc.[parent_column_id] = colFK.[column_id]
	INNER JOIN sys.columns              AS colPK        ON  fkc.[referenced_object_id] = colPK.[object_id]
													   AND  fkc.[referenced_column_id] = colPK.[column_id]
	INNER JOIN sys.tables               AS [reftable]   ON   fk.[referenced_object_id] = [reftable].[object_id]
	WHERE [table].[name] LIKE @tableName OR [reftable].[name] LIKE @tableName

	UPDATE #data
	SET SourceTableName = TargetTableName
	  , TargetTableName = SourceTableName 
	  , SourceTableColumn = [TargetTableColumn] 
	  , [TargetTableColumn] = SourceTableColumn
	WHERE [HasMultipleMatchingValues] = 1
    
	UPDATE #data
	SET Query = 'SELECT s.' + QUOTENAME(SourceTableColumn)
			  + ' FROM ' + QUOTENAME(SourceTableName) + ' AS s' 
			  + ' WHERE s.' + QUOTENAME(@columnName) + ' = ' + CAST(@id AS NVARCHAR(16))


	CREATE TABLE #result (TargetTableName NVARCHAR(MAX), TargetTableColumn NVARCHAR(MAX), ColumnValue INT)
  
	DECLARE @query NVARCHAR(MAX), @targetTableName NVARCHAR(128), @targetColumnName NVARCHAR(128);
	DECLARE myCursor CURSOR FOR   
		SELECT TargetTableName, TargetTableColumn, Query 
		FROM #data    
	OPEN myCursor  
  
	FETCH NEXT FROM myCursor   
	INTO @targetTableName, @targetColumnName, @query
  
	WHILE @@FETCH_STATUS = 0  
	BEGIN  

		CREATE TABLE #tmp (Id INT)
    
		PRINT @query

		INSERT INTO #tmp
		EXEC sp_executesql @query

		INSERT INTO #result (TargetTableName, TargetTableColumn, ColumnValue) 
		SELECT DISTINCT @targetTableName, @targetColumnName, #tmp.Id 
		FROM #tmp

		DROP TABLE #tmp

		FETCH NEXT FROM myCursor
	INTO @targetTableName, @targetColumnName, @query
	END
	CLOSE myCursor;  
	DEALLOCATE myCursor;  

	DROP TABLE #data

	SELECT * FROM #result

	DROP TABLE #result
END
GO
PRINT N'Creating [dbo].[DbExplorer_GetTablesAndColumns]...';


GO
CREATE PROCEDURE [dbo].[DbExplorer_GetTablesAndColumns]
AS
	SELECT [table].[name] AS [TableName], [column].[name] AS [ColumnName]
	FROM sys.tables AS [table]
	INNER JOIN sys.columns AS [column] ON [column].[object_id] = [table].[object_id]
	WHERE TYPE_NAME([column].system_type_id) LIKE 'INT'
	ORDER BY [TableName], [ColumnName]
RETURN 0
GO

-- HumanRelationKinds ----------------------------------------------------------

IF NOT EXISTS(SELECT * FROM [HumanRelationKinds] AS hrk WHERE hrk.[Name] = 'Mother')
BEGIN
	INSERT INTO [HumanRelationKinds] ([Name]) VALUES ('Mother')
END
IF NOT EXISTS(SELECT * FROM [HumanRelationKinds] AS hrk WHERE hrk.[Name] = 'Father')
BEGIN
	INSERT INTO [HumanRelationKinds] ([Name]) VALUES ('Father')
END
GO

GO
PRINT N'Update complete.';


GO
